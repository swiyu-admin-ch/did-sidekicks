// SPDX-License-Identifier: MIT

namespace did_sidekicks {
};

/// The error accompanying this crate.
[Error]
enum DidSidekicksError {
    /// Failed to serialize DID document (to JSON).
    "SerializationFailed",
    /// The supplied did doc is invalid or contains an argument which isn't part of the did specification/recommendation.
    "DeserializationFailed",
    /// Invalid DID document.
    "InvalidDidDocument",
    /// Invalid DID log integration proof.
    "InvalidDataIntegrityProof",
    /// Invalid DID method parameter
    "InvalidDidMethodParameter"
};

/// A generic DID method parameter as seen from the perspective of a JSON deserializer.
/// The value returned by `DidMethodParameter`'s getter `as_json_string` must always be deserializable into a JSON object.
interface DidMethodParameter {
    string get_name();
    string get_json_text();
    boolean is_bool();
    boolean is_string();
    boolean is_number();
    boolean is_object();
    boolean is_array();
    boolean is_null();
    boolean get_bool_value();
    string get_string_value();
    double get_f64_value();
    i64 get_i64_value();
    u64 get_u64_value();
};

dictionary Jwk {
  string? alg;
  string? kid;
  string? kty;
  string? crv;
  string? x;
  string? y;
};

enum VerificationType {
    "Multikey",
    "JsonWebKey2020",
    "Ed25519VerificationKey2020",
};

dictionary VerificationMethod {
    string id;
    string controller;
    VerificationType verification_type;
    string? public_key_multibase;
    Jwk? public_key_jwk;
};

interface DidDoc {
    [Name=from_json, Throws=DidSidekicksError]
    constructor([ByRef] string json_content);
    sequence<string> get_context();
    string get_id();
    sequence<VerificationMethod> get_verification_method();
    sequence<VerificationMethod> get_authentication();
    sequence<VerificationMethod> get_capability_invocation();
    sequence<VerificationMethod> get_capability_delegation();
    sequence<VerificationMethod> get_assertion_method();
    sequence<string> get_controller();
    boolean get_deactivated();
};

/// A simple container for both `DidDoc` and the related collection of `DidMethodParameter` objects.
interface DidDocExtended {
    DidDoc get_did_doc();
    record<string, DidMethodParameter> get_did_method_parameters();
};

/// W.r.t. any of specification versions available at https://identity.foundation/didwebvh
[Trait]
interface DidLogEntryJsonSchema {
    /// Delivers a proper JSON schema (in UTF-8 format) fully describing a DID log entry.
    string get_json_schema();
};

/// Represents any error condition that might occur in conjunction with `DidLogEntryValidator`
[Error]
enum DidLogEntryValidatorError {
    /// The supplied JSON `instance` is not a valid DID log.
    "ValidationError",
    /// The supplied JSON `instance` cannot be deserialized.
    "DeserializationError",
};

/// A compiled JSON Schema validator.
///
/// This structure represents a JSON Schema that has been parsed and compiled into
/// an efficient internal representation for validation. It contains the root node
/// of the schema tree and the configuration options used during compilation.
///
/// Intended to be used predominantly in conjunction with `DidLogEntryJsonSchema` trait implementations.
interface DidLogEntryValidator {
    /// Create a new DID log entry JSON Schema validator using `JSON Schema Draft 2020-12` specifications and supplied `schema`.
    [Name=from]
    constructor(DidLogEntryJsonSchema schema);
    /// Validate the supplied `instance` against the `schema` (supplied earlier via constructor).
    ///
    /// `DidLogEntryValidatorError` is returned as soon the very first validation error occurs.
    [Throws=DidLogEntryValidatorError]
    void validate(string instance);
};
