// SPDX-License-Identifier: MIT
namespace did_sidekicks {
};

/// The error accompanying this crate.
[Error]
enum DidSidekicksError {
    /// Failed to serialize DID document (to JSON).
    "SerializationFailed",
    /// The supplied did doc is invalid or contains an argument which isn't part of the did specification/recommendation.
    "DeserializationFailed",
    /// Invalid DID document.
    "InvalidDidDocument",
    /// Invalid DID log integration proof.
    "InvalidDataIntegrityProof"
};


interface Ed25519Signature {
    [Name=from_multibase, Throws=DidSidekicksError]
    constructor([ByRef] string multibase);
    string to_multibase();
};

interface Ed25519SigningKey {
    [Name=from_multibase, Throws=DidSidekicksError]
    constructor([ByRef] string multibase);
    string to_multibase();
};

interface Ed25519VerifyingKey {
    [Name=from_multibase, Throws=DidSidekicksError]
    constructor([ByRef] string multibase);
    string to_multibase();
};

interface Ed25519KeyPair {
    [Name=generate]
    constructor();
    [Name=from, Throws=DidSidekicksError]
    constructor([ByRef] string signing_key_multibase);
    Ed25519Signature sign(string message);
    Ed25519SigningKey get_signing_key();
    Ed25519VerifyingKey get_verifying_key();
};

dictionary Jwk {
  string? alg;
  string? kid;
  string? kty;
  string? crv;
  string? x;
  string? y;
};

enum VerificationType {
    "Multikey",
    "JsonWebKey2020",
    "Ed25519VerificationKey2020",
};

dictionary VerificationMethod {
    string id;
    string controller;
    VerificationType verification_type;
    string? public_key_multibase;
    Jwk? public_key_jwk;
};

interface DidDoc {
    [Name=from_json, Throws=DidSidekicksError]
    constructor([ByRef] string json_content);
    sequence<string> get_context();
    string get_id();
    sequence<VerificationMethod> get_verification_method();
    sequence<VerificationMethod> get_authentication();
    sequence<VerificationMethod> get_capability_invocation();
    sequence<VerificationMethod> get_capability_delegation();
    sequence<VerificationMethod> get_assertion_method();
    sequence<string> get_controller();
    boolean get_deactivated();
};

/**
[Trait]
interface DidLogEntryJsonSchema {
    string get_schema();
};
*/

/// Represents any error condition that might occur in conjunction with `DidLogEntryValidator`
[Error]
enum DidLogEntryValidatorError {
    /// The supplied JSON instance is not a valid DID log.
    "ValidationError",
    /// The supplied JSON instance cannot be deserialized.
    "DeserializationError",
};

/// A compiled JSON Schema validator.
///
/// This structure represents a JSON Schema that has been parsed and compiled into
/// an efficient internal representation for validation. It contains the root node
/// of the schema tree and the configuration options used during compilation.
interface DidLogEntryValidator {
    /// Create a new JSON Schema validator using `JSON Schema Draft 2020-12` specifications and supplied schema.
    [Name=from]
    constructor(string schema);
    /// Validate `instance` against `schema` and return the first error if any.
    [Throws=DidLogEntryValidatorError]
    void validate(string instance);
};